When would you want to use a remote repository rather than keeping all your work local?

	Remote repositories are useful because they keep all of that data accessible and in a safe place. If everything is local, losing a laptop can mean losing a lot of work. So, if you are committing your changes regularly, you’ll have nothing to worry about!

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	There could be some code that needs debugging in the in the remote repository, and so if you’re working on a fix locally, it would be a disaster if Git auto-versioned! Like the last prompt, if you are good about committing and saving your work at logical points, this system should work for you.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	1) Forks are basically clones created in GitHub and they are useful for editing a repository that you might not necessarily have access to the master branch of.
	2) Clones are complete copies of a repository, allowing you to edit, etc. Can be stored locally.
	3) Branches are different paths running of a repository's commit history. Earlier, in the Asteroids game, we created a branch called "easy-mode" and changed some of the game's parameters. Using that branch, we are then able to try different things on it that won't effect the master branch, at least, not until we decide to merge the two.

What is the benefit of having a copy of the last known state of the remote stored locally?

	It’s beneficial if you’re going to be offline for a while; you can still continue to work on the most recent state of the remote that way.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Without Git or GitHub, you would have to keep copious notes of changes and versions when swapping them back and forth. It would be easier in that you don’t have the learning curve of Git to worry about, but it would be harder in the sense that Git address many inconsistencies both simply and automatically so you can see discrepancies clearly. I’m unsure of the alternative to running a git diff between 1,000 lines of code, but, I bet it’s time-sucking. 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Making changes in a separate branch allows you to have others look at your code and give it the go-ahead to merge with the master. I’m guessing doing it this avoids code catastrophes, etc. Making a change directly in will require less steps, but, you run into all of the other problems listed above.